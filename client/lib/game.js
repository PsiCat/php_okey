// Generated by CoffeeScript 1.6.1
var AddTileToCue, AppointIndicator, BroadcastMessageRequest, ByteArray, COLORS, CUE_ROWS, ChangeAvatarRequest, ChangeStage, ChangeTableSettingRequest, ClaimATile, ClaimTileFromDiscards, ClaimTileFromStack, ClientPacketHeader, Connection, CreateRoomRequest, DIRECTIONS, DISCARDS, DiscardATile, DiscardTileRequest, DiscardedTileClaimed, EndTurnRequest, GameIsResuming, GameOver, GameStarted, GameSuspended, JoinRoomRequest, LeaveRoomRequest, LoginRequest, MoveTileRequest, NewRoomFounded, PLAYERS, PacketHandler, PlayerJoinedLobby, PlayerLeftLobby, ReadyUpRequest, ReadyUpStatus, ReceivablePacket, RegisterRequest, RemoveTileFromCue, ResetLobby, ResetTable, RoomBrokeDown, RoomMessageBroadcast, RoomSeatDumped, RoomSeatTaken, STAGES, ScoreBoardRequest, Scoreboard, SendablePacket, SystemMessage, TableOwnershipHandedOver, TableSeatDumped, TableSeatTaken, TileDiscarded, TurnChanged, UpdateMyData, UpdateRoomSetting, UpdateTableSetting, UpdateTilesLeft, UpdateViewport, Utils, btn_snd, change_stage, code, dump_packet, error, info, packet, simulate, system_message, warning, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

ByteArray = (function() {

  ByteArray.prototype.position = 0;

  function ByteArray(bytes) {
    this.bytes = bytes != null ? bytes : [];
  }

  ByteArray.prototype.length = function() {
    return this.bytes.length;
  };

  ByteArray.prototype.bytes_available = function() {
    return this.length() - this.position;
  };

  ByteArray.prototype.read_byte = function() {
    return this.read_next();
  };

  ByteArray.prototype.read_bytes = function(byte_array, position, length) {
    var i, _i, _results;
    if (position == null) {
      position = 0;
    }
    if (length == null) {
      length = 0;
    }
    byte_array.position = position;
    _results = [];
    for (i = _i = 0; 0 <= length ? _i < length : _i > length; i = 0 <= length ? ++_i : --_i) {
      _results.push(byte_array.write_byte(this.read_byte())(i));
    }
    return _results;
  };

  ByteArray.prototype.read_bool = function() {
    return this.read_byte() === 0x01;
  };

  ByteArray.prototype.read_short = function() {
    var i;
    i = this.read_next() << 8;
    return i += this.read_next() << 0;
  };

  ByteArray.prototype.read_int = function() {
    var i;
    i = this.read_next() << 24;
    i += this.read_next() << 16;
    i += this.read_next() << 8;
    return i += this.read_next() << 0;
  };

  ByteArray.prototype.read_string = function() {
    var next, string;
    string = '';
    if (this.bytes_available()) {
      while (next = this.read_byte()) {
        string += String.fromCharCode(next);
      }
    }
    return string;
  };

  ByteArray.prototype.read_next = function() {
    if (!this.bytes_available()) {
      throw 'Satır sonu';
    }
    return this.bytes[this.position++] & 0xFF;
  };

  ByteArray.prototype.write_byte = function(val) {
    return this.bytes[this.position++] = val >> 0;
  };

  ByteArray.prototype.write_bytes = function(source, position, limit) {
    var i, _i, _results;
    source.position = position;
    _results = [];
    for (i = _i = 0; 0 <= limit ? _i < limit : _i > limit; i = 0 <= limit ? ++_i : --_i) {
      _results.push(this.write_byte(source.read_byte()));
    }
    return _results;
  };

  ByteArray.prototype.write_bool = function(val) {
    return this.bytes[this.position++] = val ? 0x01 : 0x00;
  };

  ByteArray.prototype.write_short = function(val) {
    this.bytes[this.position++] = val >> 8 & 0xFF;
    return this.bytes[this.position++] = val >> 0 & 0xFF;
  };

  ByteArray.prototype.write_int = function(val) {
    this.bytes[this.position++] = val >> 24 & 0xFF;
    this.bytes[this.position++] = val >> 16 & 0xFF;
    this.bytes[this.position++] = val >> 8 & 0xFF;
    return this.bytes[this.position++] = val >> 0 & 0xFF;
  };

  ByteArray.prototype.write_string = function(val) {
    var chr, chr_array, _i, _len;
    chr_array = val.split('');
    for (_i = 0, _len = chr_array.length; _i < _len; _i++) {
      chr = chr_array[_i];
      this.write_byte(chr.charCodeAt(0));
    }
    return this.write_byte(0x00);
  };

  ByteArray.prototype.to_string = function() {
    var hex_array, hex_string, i;
    hex_array = (function() {
      var _i, _len, _ref, _results;
      _ref = this.bytes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        _results.push(ByteArray.dec_to_hex(i));
      }
      return _results;
    }).call(this);
    hex_string = (function() {
      var _i, _len, _ref, _results;
      _ref = this.bytes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        _results.push(ByteArray.hex_to_str(i));
      }
      return _results;
    }).call(this);
    return {
      hex: hex_array.join(' ').replace(/([^\0]{48})/g, '$1\n'),
      string: hex_string.join(' ').replace(/([^\0]{48})/g, '$1\n')
    };
  };

  ByteArray.prototype.to_array = function() {
    return this.bytes;
  };

  ByteArray.dec_to_hex = function(dec) {
    var hex_value;
    if (dec === null) {
      return hex_value = '  ';
    } else {
      return hex_value = ("0" + (Number(dec).toString(16))).slice(-2).toUpperCase();
    }
  };

  ByteArray.hex_to_str = function(hex) {
    if (hex >= 32 && hex <= 126) {
      return String.fromCharCode(hex) + ' ';
    } else {
      return '. ';
    }
  };

  return ByteArray;

})();

STAGES = [];

STAGES[0x00] = [$('#login'), $('#login_form')];

STAGES[0x01] = [$('#login'), $('#register_form')];

STAGES[0x02] = [$('#game'), $('#lobby')];

STAGES[0x03] = [$('#game'), $('#table')];

CUE_ROWS = [];

CUE_ROWS[0x00] = $('#first_line');

CUE_ROWS[0x01] = $('#second_line');

COLORS = [];

COLORS[0x00] = 'black';

COLORS[0x01] = 'blue';

COLORS[0x02] = 'red';

COLORS[0x03] = 'yellow';

COLORS[0x04] = 'fake';

DIRECTIONS = [];

DIRECTIONS[0x00] = 's';

DIRECTIONS[0x01] = 'e';

DIRECTIONS[0x02] = 'n';

DIRECTIONS[0x03] = 'w';

DISCARDS = [];

DISCARDS[0x00] = $('#discard_se');

DISCARDS[0x01] = $('#discard_ne');

DISCARDS[0x02] = $('#discard_nw');

DISCARDS[0x03] = $('#discard_sw');

PLAYERS = [];

PLAYERS[0x00] = $('#player_s');

PLAYERS[0x01] = $('#player_e');

PLAYERS[0x02] = $('#player_n');

PLAYERS[0x03] = $('#player_w');

Utils = (function() {

  function Utils() {}

  Utils.get_arg_names = function(func) {
    return String(func).match(/\(.*?\)/)[0].replace(/[()]/gi, '').replace(/\s/gi, '').split(',');
  };

  Utils.scroll_array = function(arr, offset) {
    return arr.slice(offset, arr.length).concat(arr.slice(0, offset));
  };

  return Utils;

})();

ReceivablePacket = (function(_super) {

  __extends(ReceivablePacket, _super);

  function ReceivablePacket() {
    return ReceivablePacket.__super__.constructor.apply(this, arguments);
  }

  ReceivablePacket.prototype.implement = function() {
    throw 'Okunmamış paket.';
  };

  ReceivablePacket.prototype.execute = function() {
    throw 'İşlenmemiş paket';
  };

  return ReceivablePacket;

})(ByteArray);

SendablePacket = (function(_super) {

  __extends(SendablePacket, _super);

  function SendablePacket() {
    return SendablePacket.__super__.constructor.apply(this, arguments);
  }

  SendablePacket.prototype.write = function() {
    throw "Yazılmamış paket.";
  };

  SendablePacket.prototype.calculate = function() {
    this.bytes.unshift(0x00, 0x00);
    this.position = 0;
    return this.write_short(this.bytes.length);
  };

  SendablePacket.prototype.errors = function() {
    return null;
  };

  return SendablePacket;

})(ByteArray);

ClientPacketHeader = (function() {

  function ClientPacketHeader() {}

  ClientPacketHeader.LOGIN_REQUEST = 0x00;

  ClientPacketHeader.REGISTER_REQUEST = 0x01;

  ClientPacketHeader.CHANGE_AVATAR_REQUEST = 0x02;

  ClientPacketHeader.CREATE_ROOM_REQUEST = 0x03;

  ClientPacketHeader.CHANGE_TABLE_SETTING_REQUEST = 0x04;

  ClientPacketHeader.READY_UP_REQUEST = 0x05;

  ClientPacketHeader.SCORE_BOARD_REQUEST = 0x06;

  ClientPacketHeader.LEAVE_ROOM_REQUEST = 0x07;

  ClientPacketHeader.MOVE_TILE_REQUEST = 0x08;

  ClientPacketHeader.CLAIM_TILE_FROM_DISCARDS = 0x09;

  ClientPacketHeader.CLAIM_TILE_FROM_STACK = 0x0A;

  ClientPacketHeader.BROADCAST_MESSAGE_REQUEST = 0x0B;

  ClientPacketHeader.DISCARD_TILE_REQUEST = 0x0C;

  ClientPacketHeader.JOIN_ROOM_REQUEST = 0x0D;

  ClientPacketHeader.END_TURN_REQUEST = 0x0E;

  return ClientPacketHeader;

})();

BroadcastMessageRequest = (function(_super) {

  __extends(BroadcastMessageRequest, _super);

  function BroadcastMessageRequest(message) {
    this.message = message;
    BroadcastMessageRequest.__super__.constructor.call(this, []);
  }

  BroadcastMessageRequest.prototype.write = function() {
    this.write_byte(ClientPacketHeader.BROADCAST_MESSAGE_REQUEST);
    return this.write_string(this.message);
  };

  BroadcastMessageRequest.prototype.errors = function() {
    if ($.trim(this.message = $.trim(this.message)).length === 0) {
      return 'Boş mesaj gönderemezsiniz.';
    } else {
      return BroadcastMessageRequest.__super__.errors.apply(this, arguments);
    }
  };

  return BroadcastMessageRequest;

})(SendablePacket);

ChangeAvatarRequest = (function(_super) {

  __extends(ChangeAvatarRequest, _super);

  function ChangeAvatarRequest(avatar) {
    this.avatar = avatar;
    ChangeAvatarRequest.__super__.constructor.call(this, []);
  }

  ChangeAvatarRequest.prototype.write = function() {
    this.write_byte(ClientPacketHeader.CHANGE_AVATAR_REQUEST);
    return this.write_string(this.avatar);
  };

  ChangeAvatarRequest.prototype.errors = function() {
    if (!this.avatar.match(/^[qazwsx]{1}$/)) {
      return "Geçersiz resim.";
    } else {
      return null;
    }
  };

  return ChangeAvatarRequest;

})(SendablePacket);

ChangeTableSettingRequest = (function(_super) {

  __extends(ChangeTableSettingRequest, _super);

  ChangeTableSettingRequest.MATCH_POINTS = 0x00;

  ChangeTableSettingRequest.BONUS_POINTS = 0x01;

  ChangeTableSettingRequest.COMPANY_MODE = 0x02;

  function ChangeTableSettingRequest(type, value) {
    this.type = type;
    this.value = value;
    ChangeTableSettingRequest.__super__.constructor.call(this, []);
  }

  ChangeTableSettingRequest.prototype.write = function() {
    this.write_byte(ClientPacketHeader.CHANGE_TABLE_SETTING_REQUEST);
    this.write_byte(this.type);
    return this.write_byte(this.value);
  };

  ChangeTableSettingRequest.prototype.errors = function() {
    var value;
    value = this.value;
    switch (true) {
      case $.inArray(this.type, [0x00, 0x01, 0x02]) < 0:
        return "Bilinmeyen ayar '" + this.type + "'.";
      case this.type === 0x00 && $.inArray(parseInt(value), [5, 7, 9, 11]) < 0:
        return "Geçersiz maç puanı '" + value + "'.";
      case this.type === 0x01 && $.inArray(parseInt(value), [0, 1]) < 0:
        return "Geçersiz gösterge ayarı '" + value + "'.";
      case this.type === 0x02 && $.inArray(parseInt(value), [0, 1]) < 0:
        return "Geçersiz eş ayarı '" + value + "'.";
      default:
        return ChangeTableSettingRequest.__super__.errors.apply(this, arguments);
    }
  };

  return ChangeTableSettingRequest;

})(SendablePacket);

ClaimTileFromDiscards = (function(_super) {

  __extends(ClaimTileFromDiscards, _super);

  function ClaimTileFromDiscards(pos_x, pos_y) {
    this.pos_x = pos_x;
    this.pos_y = pos_y;
    ClaimTileFromDiscards.__super__.constructor.call(this, []);
  }

  ClaimTileFromDiscards.prototype.write = function() {
    return this.write_byte(ClientPacketHeader.CLAIM_TILE_FROM_DISCARDS);
  };

  return ClaimTileFromDiscards;

})(SendablePacket);

ClaimTileFromStack = (function(_super) {

  __extends(ClaimTileFromStack, _super);

  function ClaimTileFromStack(pos_x, pos_y) {
    this.pos_x = pos_x;
    this.pos_y = pos_y;
    ClaimTileFromStack.__super__.constructor.call(this, []);
  }

  ClaimTileFromStack.prototype.write = function() {
    return this.write_byte(ClientPacketHeader.CLAIM_TILE_FROM_STACK);
  };

  return ClaimTileFromStack;

})(SendablePacket);

CreateRoomRequest = (function(_super) {

  __extends(CreateRoomRequest, _super);

  function CreateRoomRequest() {
    CreateRoomRequest.__super__.constructor.call(this, []);
  }

  CreateRoomRequest.prototype.write = function() {
    return this.write_byte(ClientPacketHeader.CREATE_ROOM_REQUEST);
  };

  return CreateRoomRequest;

})(SendablePacket);

DiscardTileRequest = (function(_super) {

  __extends(DiscardTileRequest, _super);

  function DiscardTileRequest(row, column) {
    this.row = row;
    this.column = column;
    DiscardTileRequest.__super__.constructor.call(this, []);
  }

  DiscardTileRequest.prototype.write = function() {
    this.write_byte(ClientPacketHeader.DISCARD_TILE_REQUEST);
    this.write_byte(this.row);
    return this.write_byte(this.column);
  };

  return DiscardTileRequest;

})(SendablePacket);

EndTurnRequest = (function(_super) {

  __extends(EndTurnRequest, _super);

  function EndTurnRequest(pos_x, pos_y) {
    this.pos_x = pos_x;
    this.pos_y = pos_y;
    EndTurnRequest.__super__.constructor.call(this, []);
  }

  EndTurnRequest.prototype.write = function() {
    this.write_byte(ClientPacketHeader.END_TURN_REQUEST);
    this.write_byte(this.pos_x);
    return this.write_byte(this.pos_y);
  };

  return EndTurnRequest;

})(SendablePacket);

JoinRoomRequest = (function(_super) {

  __extends(JoinRoomRequest, _super);

  function JoinRoomRequest(room_id, direction) {
    this.room_id = room_id;
    this.direction = direction;
    JoinRoomRequest.__super__.constructor.call(this, []);
  }

  JoinRoomRequest.prototype.write = function() {
    this.write_byte(ClientPacketHeader.JOIN_ROOM_REQUEST);
    this.write_byte(this.room_id);
    return this.write_byte(this.direction);
  };

  return JoinRoomRequest;

})(SendablePacket);

LeaveRoomRequest = (function(_super) {

  __extends(LeaveRoomRequest, _super);

  function LeaveRoomRequest() {
    LeaveRoomRequest.__super__.constructor.call(this, []);
  }

  LeaveRoomRequest.prototype.write = function() {
    return this.write_byte(ClientPacketHeader.LEAVE_ROOM_REQUEST);
  };

  return LeaveRoomRequest;

})(SendablePacket);

LoginRequest = (function(_super) {

  __extends(LoginRequest, _super);

  function LoginRequest(username, password) {
    this.username = username;
    this.password = password;
    LoginRequest.__super__.constructor.call(this, []);
  }

  LoginRequest.prototype.write = function() {
    this.write_byte(ClientPacketHeader.LOGIN_REQUEST);
    this.write_string(this.username);
    return this.write_string(this.password);
  };

  LoginRequest.prototype.errors = function() {
    if (!this.username.match(/^[\w\d]{3,12}$/i)) {
      return "Kullanıcı adı geçersiz.";
    } else if (!this.password.match(/^[\w\d]{6,16}$/i)) {
      return "Şifre geçersiz.";
    } else {
      return LoginRequest.__super__.errors.apply(this, arguments);
    }
  };

  return LoginRequest;

})(SendablePacket);

MoveTileRequest = (function(_super) {

  __extends(MoveTileRequest, _super);

  function MoveTileRequest(from_row, from_column, to_row, to_column) {
    this.from_row = from_row;
    this.from_column = from_column;
    this.to_row = to_row;
    this.to_column = to_column;
    MoveTileRequest.__super__.constructor.call(this, []);
  }

  MoveTileRequest.prototype.write = function() {
    this.write_byte(ClientPacketHeader.MOVE_TILE_REQUEST);
    this.write_byte(this.from_row);
    this.write_byte(this.from_column);
    this.write_byte(this.to_row);
    return this.write_byte(this.to_column);
  };

  return MoveTileRequest;

})(SendablePacket);

ReadyUpRequest = (function(_super) {

  __extends(ReadyUpRequest, _super);

  function ReadyUpRequest() {
    ReadyUpRequest.__super__.constructor.call(this, []);
  }

  ReadyUpRequest.prototype.write = function() {
    return this.write_byte(ClientPacketHeader.READY_UP_REQUEST);
  };

  return ReadyUpRequest;

})(SendablePacket);

RegisterRequest = (function(_super) {

  __extends(RegisterRequest, _super);

  function RegisterRequest(username, password, password_confirm) {
    this.username = username;
    this.password = password;
    this.password_confirm = password_confirm;
    RegisterRequest.__super__.constructor.call(this, []);
  }

  RegisterRequest.prototype.write = function() {
    this.write_byte(ClientPacketHeader.REGISTER_REQUEST);
    this.write_string(this.username);
    this.write_string(this.password);
    return this.write_string(this.password_confirm);
  };

  RegisterRequest.prototype.errors = function() {
    if (!this.username.match(/^[\w\d]{4,16}$/i)) {
      return "Kullanıcı adı geçersiz.";
    } else if (!this.password.match(/^[\w\d]{4,16}$/i)) {
      return "Şifre geçersiz.";
    } else if (this.password !== this.password_confirm) {
      return "Şifreler uyuşmuyor";
    } else {
      return RegisterRequest.__super__.errors.apply(this, arguments);
    }
  };

  return RegisterRequest;

})(SendablePacket);

ScoreBoardRequest = (function(_super) {

  __extends(ScoreBoardRequest, _super);

  function ScoreBoardRequest() {
    ScoreBoardRequest.__super__.constructor.call(this, []);
  }

  ScoreBoardRequest.prototype.write = function() {
    return this.write_byte(ClientPacketHeader.SCORE_BOARD_REQUEST);
  };

  return ScoreBoardRequest;

})(SendablePacket);

AddTileToCue = (function(_super) {

  __extends(AddTileToCue, _super);

  function AddTileToCue() {
    return AddTileToCue.__super__.constructor.apply(this, arguments);
  }

  AddTileToCue.prototype.implement = function(row, column, color, number, is_fake) {
    this.row = row != null ? row : this.read_byte();
    this.column = column != null ? column : this.read_byte();
    this.color = color != null ? color : this.read_byte();
    this.number = number != null ? number : this.read_byte();
    this.is_fake = is_fake != null ? is_fake : this.read_bool();
  };

  AddTileToCue.prototype.execute = function() {
    var tile;
    tile = $('<span class="tile">').addClass(COLORS[this.color]).text(this.isfake ? '!' : this.number).attr('unselectable', 'on').draggable({
      revert: "invalid",
      appendTo: "#canvas",
      containment: '#canvas',
      zIndex: 99
    });
    return $($(CUE_ROWS[this.row]).find('li')[this.column]).empty().append(tile);
  };

  return AddTileToCue;

})(ReceivablePacket);

AppointIndicator = (function(_super) {

  __extends(AppointIndicator, _super);

  function AppointIndicator() {
    return AppointIndicator.__super__.constructor.apply(this, arguments);
  }

  AppointIndicator.prototype.implement = function(color, num) {
    this.color = color != null ? color : this.read_byte();
    this.num = num != null ? num : this.read_byte();
  };

  AppointIndicator.prototype.execute = function() {
    return $('#indicator').removeClass(COLORS.join(' ')).addClass(COLORS[this.color]).text(this.num);
  };

  return AppointIndicator;

})(ReceivablePacket);

ChangeStage = (function(_super) {

  __extends(ChangeStage, _super);

  function ChangeStage() {
    return ChangeStage.__super__.constructor.apply(this, arguments);
  }

  ChangeStage.prototype.implement = function(stage) {
    this.stage = stage != null ? stage : this.read_byte();
  };

  ChangeStage.prototype.execute = function() {
    return change_stage.apply(this, STAGES[this.stage]);
  };

  return ChangeStage;

})(ReceivablePacket);

ClaimATile = (function(_super) {

  __extends(ClaimATile, _super);

  function ClaimATile() {
    return ClaimATile.__super__.constructor.apply(this, arguments);
  }

  ClaimATile.prototype.implement = function(from) {
    this.from = from != null ? from : this.read_byte();
  };

  ClaimATile.prototype.execute = function() {
    DISCARDS[this.from].find('.tile').last().draggable({
      revert: "invalid",
      appendTo: "#canvas",
      containment: '#canvas',
      zIndex: 99
    });
    return $('#stack_tile').draggable({
      revert: "invalid",
      appendTo: "#canvas",
      containment: '#canvas',
      zIndex: 99,
      helper: 'clone'
    });
  };

  return ClaimATile;

})(ReceivablePacket);

DiscardedTileClaimed = (function(_super) {

  __extends(DiscardedTileClaimed, _super);

  function DiscardedTileClaimed() {
    return DiscardedTileClaimed.__super__.constructor.apply(this, arguments);
  }

  DiscardedTileClaimed.prototype.implement = function(at) {
    this.at = at != null ? at : this.read_byte();
  };

  DiscardedTileClaimed.prototype.execute = function() {
    return DISCARDS[this.at].find('.tile').last().remove();
  };

  return DiscardedTileClaimed;

})(ReceivablePacket);

DiscardATile = (function(_super) {

  __extends(DiscardATile, _super);

  function DiscardATile() {
    return DiscardATile.__super__.constructor.apply(this, arguments);
  }

  DiscardATile.prototype.implement = function(to) {
    this.to = to != null ? to : this.read_byte();
  };

  DiscardATile.prototype.execute = function() {
    $('#stack_tile.ui-draggable, .discard .ui-draggable').draggable('destroy');
    DISCARDS[this.to].droppable({
      hoverClass: "hover",
      disabled: false,
      drop: function(event, ui) {
        $(ui.draggable).appendTo($(this)).css({
          top: 0,
          left: 0
        });
        return Connection.get_instance().send(new DiscardTileRequest(ui.draggable.parent().parent().data('row')), ui.draggable.parent().data('col'));
      }
    });
    return $('#indicator').droppable({
      hoverClass: "hover",
      disabled: false,
      drop: function(event, ui) {
        ui.draggable.css({
          top: 0,
          left: 0
        });
        return Connection.get_instance().send(new EndTurnRequest(ui.draggable.parent().parent().data('row')), ui.draggable.parent().data('col'));
      }
    });
  };

  return DiscardATile;

})(SendablePacket);

GameIsResuming = (function(_super) {

  __extends(GameIsResuming, _super);

  function GameIsResuming() {
    return GameIsResuming.__super__.constructor.apply(this, arguments);
  }

  GameIsResuming.prototype.implement = function() {};

  GameIsResuming.prototype.execute = function() {
    return info("Oyunu devam ediyor.");
  };

  return GameIsResuming;

})(ReceivablePacket);

GameOver = (function(_super) {

  __extends(GameOver, _super);

  function GameOver() {
    return GameOver.__super__.constructor.apply(this, arguments);
  }

  GameOver.prototype.implement = function(winner) {
    this.winner = winner != null ? winner : this.read_string();
  };

  GameOver.prototype.execute = function() {
    return info("Oyunu " + this.winner + " kazandı.");
  };

  return GameOver;

})(ReceivablePacket);

GameStarted = (function(_super) {

  __extends(GameStarted, _super);

  function GameStarted() {
    return GameStarted.__super__.constructor.apply(this, arguments);
  }

  GameStarted.prototype.implement = function() {};

  GameStarted.prototype.execute = function() {
    return info("Oyunu basladi.");
  };

  return GameStarted;

})(ReceivablePacket);

GameSuspended = (function(_super) {

  __extends(GameSuspended, _super);

  function GameSuspended() {
    return GameSuspended.__super__.constructor.apply(this, arguments);
  }

  GameSuspended.prototype.implement = function() {};

  GameSuspended.prototype.execute = function() {
    return info("Oyunu durdu.");
  };

  return GameSuspended;

})(ReceivablePacket);

NewRoomFounded = (function(_super) {

  __extends(NewRoomFounded, _super);

  function NewRoomFounded() {
    return NewRoomFounded.__super__.constructor.apply(this, arguments);
  }

  NewRoomFounded.prototype.implement = function(room_id, south, east, north, west, match_points, bonus_points, company) {
    this.room_id = room_id != null ? room_id : this.read_byte();
    this.south = south != null ? south : this.read_string();
    this.east = east != null ? east : this.read_string();
    this.north = north != null ? north : this.read_string();
    this.west = west != null ? west : this.read_string();
    this.match_points = match_points != null ? match_points : this.read_byte();
    this.bonus_points = bonus_points != null ? bonus_points : this.read_bool();
    this.company = company != null ? company : this.read_bool();
  };

  NewRoomFounded.prototype.execute = function() {
    return $('#rooms_list').append($('<li>').data('id', this.room_id).append($('<span class="room_id">').text('#' + this.room_id)).append(this.add_seat(this.room_id, 0x00, this.south)).append(this.add_seat(this.room_id, 0x01, this.east)).append(this.add_seat(this.room_id, 0x02, this.north)).append(this.add_seat(this.room_id, 0x03, this.west)).append($('<span class="match_points">').addClass('on').text(this.match_points)).append($('<span class="bonus_points">').addClass(this.bonus_points ? 'on' : 'off').text('G')).append($('<span class="company_mode">').addClass(this.company ? 'on' : 'off').text('E')));
  };

  NewRoomFounded.prototype.add_seat = function(room_id, direction, holder) {
    var seat;
    seat = $('<input type="button" class="seat">').addClass(DIRECTIONS[direction]);
    if (holder) {
      return seat.attr("disabled", true).val(holder);
    } else {
      return seat.val('Otur').click(function() {
        return Connection.get_instance().send(new JoinRoomRequest(room_id, direction));
      });
    }
  };

  return NewRoomFounded;

})(ReceivablePacket);

PlayerJoinedLobby = (function(_super) {

  __extends(PlayerJoinedLobby, _super);

  function PlayerJoinedLobby() {
    return PlayerJoinedLobby.__super__.constructor.apply(this, arguments);
  }

  PlayerJoinedLobby.prototype.implement = function(player_id, name) {
    this.player_id = player_id != null ? player_id : this.read_int();
    this.name = name != null ? name : this.read_string();
  };

  PlayerJoinedLobby.prototype.execute = function() {
    return $('#players_list').append($('<li>').text(this.name).data('id', this.player_id));
  };

  return PlayerJoinedLobby;

})(ReceivablePacket);

PlayerLeftLobby = (function(_super) {

  __extends(PlayerLeftLobby, _super);

  function PlayerLeftLobby() {
    return PlayerLeftLobby.__super__.constructor.apply(this, arguments);
  }

  PlayerLeftLobby.prototype.implement = function(player_id) {
    this.player_id = player_id != null ? player_id : this.read_int();
  };

  PlayerLeftLobby.prototype.execute = function() {
    var player_id;
    player_id = this.player_id;
    return $('#players_list li').filter(function() {
      return $(this).data('id') === player_id;
    }).remove();
  };

  return PlayerLeftLobby;

})(ReceivablePacket);

ReadyUpStatus = (function(_super) {

  __extends(ReadyUpStatus, _super);

  function ReadyUpStatus() {
    return ReadyUpStatus.__super__.constructor.apply(this, arguments);
  }

  ReadyUpStatus.prototype.implement = function(direction, is_ready, is_my_status) {
    this.direction = direction != null ? direction : this.read_byte();
    this.is_ready = is_ready != null ? is_ready : this.read_bool();
    this.is_my_status = is_my_status != null ? is_my_status : this.read_bool();
  };

  ReadyUpStatus.prototype.execute = function() {
    PLAYERS[this.direction].removeClass('ready busy').addClass(this.is_ready ? 'ready' : 'busy');
    console.log(this.is_my_status);
    if (this.is_my_status) {
      return $('#ready').removeClass('ready busy').addClass(this.is_ready ? 'ready' : 'busy');
    }
  };

  return ReadyUpStatus;

})(ReceivablePacket);

RemoveTileFromCue = (function(_super) {

  __extends(RemoveTileFromCue, _super);

  function RemoveTileFromCue() {
    return RemoveTileFromCue.__super__.constructor.apply(this, arguments);
  }

  RemoveTileFromCue.prototype.implement = function(row, column) {
    this.row = row != null ? row : this.read_byte;
    this.column = column != null ? column : this.read_byte;
  };

  RemoveTileFromCue.prototype.execute = function() {
    return $($(CUE_ROWS[this.row]).find('li')[this.column]).empty();
  };

  return RemoveTileFromCue;

})(ReceivablePacket);

ResetLobby = (function(_super) {

  __extends(ResetLobby, _super);

  function ResetLobby() {
    return ResetLobby.__super__.constructor.apply(this, arguments);
  }

  ResetLobby.prototype.implement = function() {};

  ResetLobby.prototype.execute = function() {
    $('#rooms_list').empty();
    return $('#players_list').empty();
  };

  return ResetLobby;

})(ReceivablePacket);

ResetTable = (function(_super) {

  __extends(ResetTable, _super);

  function ResetTable() {
    return ResetTable.__super__.constructor.apply(this, arguments);
  }

  ResetTable.prototype.implement = function() {};

  ResetTable.prototype.execute = function() {
    var el, _i, _len, _ref;
    _ref = [$('match_points'), $('bonus_points'), $('company_mode')];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      el = _ref[_i];
      el.val(null);
    }
    $('#ready').removeClass("yes no").addClass("no").removeAttr("disabled");
    $('#canvas .tile').remove();
    $('#leader, #turn').hide();
    $('.player .username, .player .avatar, #tiles_left').text('');
    return $('#ready').enable();
  };

  return ResetTable;

})(ReceivablePacket);

RoomBrokeDown = (function(_super) {

  __extends(RoomBrokeDown, _super);

  function RoomBrokeDown() {
    return RoomBrokeDown.__super__.constructor.apply(this, arguments);
  }

  RoomBrokeDown.prototype.implement = function(room_id) {
    this.room_id = room_id != null ? room_id : this.read_byte();
  };

  RoomBrokeDown.prototype.execute = function() {
    var room_id;
    room_id = this.room_id;
    return $('#rooms_list li').filter(function() {
      return $(this).data('id') === room_id;
    }).remove();
  };

  return RoomBrokeDown;

})(ReceivablePacket);

RoomMessageBroadcast = (function(_super) {

  __extends(RoomMessageBroadcast, _super);

  function RoomMessageBroadcast() {
    return RoomMessageBroadcast.__super__.constructor.apply(this, arguments);
  }

  RoomMessageBroadcast.prototype.implement = function(username, message) {
    this.username = username != null ? username : this.read_string();
    this.message = message != null ? message : this.read_string();
  };

  RoomMessageBroadcast.prototype.execute = function() {
    return $('#broadcasts').append($('<li>').append($('<strong class="username">').text(this.username + ':')).append($('<span class="message">').text(this.message)).fadeIn(500).delay(10000).fadeOut(500));
  };

  return RoomMessageBroadcast;

})(ReceivablePacket);

RoomSeatDumped = (function(_super) {

  __extends(RoomSeatDumped, _super);

  function RoomSeatDumped() {
    return RoomSeatDumped.__super__.constructor.apply(this, arguments);
  }

  RoomSeatDumped.prototype.implement = function(room_id, seat_direction) {
    this.room_id = room_id != null ? room_id : this.read_byte();
    this.seat_direction = seat_direction != null ? seat_direction : this.read_byte();
  };

  RoomSeatDumped.prototype.execute = function() {
    var room_id, seat;
    room_id = this.room_id;
    return seat = $('#rooms_list li').filter(function() {
      return $(this).data('id') === room_id;
    }).find('.' + DIRECTIONS[this.seat_direction]).val('Otur').removeAttr('disabled');
  };

  return RoomSeatDumped;

})(ReceivablePacket);

RoomSeatTaken = (function(_super) {

  __extends(RoomSeatTaken, _super);

  function RoomSeatTaken() {
    return RoomSeatTaken.__super__.constructor.apply(this, arguments);
  }

  RoomSeatTaken.prototype.implement = function(room_id, seat_direction, username) {
    this.room_id = room_id != null ? room_id : this.read_byte();
    this.seat_direction = seat_direction != null ? seat_direction : this.read_byte();
    this.username = username != null ? username : this.read_string();
  };

  RoomSeatTaken.prototype.execute = function() {
    var room_id, seat;
    room_id = this.room_id;
    return seat = $('#rooms_list li').filter(function() {
      return $(this).data('id') === room_id;
    }).find('.' + DIRECTIONS[this.seat_direction]).val(this.username).attr('disabled', true);
  };

  return RoomSeatTaken;

})(ReceivablePacket);

Scoreboard = (function(_super) {

  __extends(Scoreboard, _super);

  function Scoreboard() {
    return Scoreboard.__super__.constructor.apply(this, arguments);
  }

  Scoreboard.prototype.implement = function(south, east, north, west) {
    this.south = south;
    this.east = east;
    this.north = north;
    this.west = west;
  };

  Scoreboard.prototype.execute = function() {
    return error('To-Do');
  };

  return Scoreboard;

})(ReceivablePacket);

SystemMessage = (function(_super) {

  __extends(SystemMessage, _super);

  function SystemMessage() {
    return SystemMessage.__super__.constructor.apply(this, arguments);
  }

  SystemMessage.INFO = 0x00;

  SystemMessage.WARNING = 0x01;

  SystemMessage.ERROR = 0x02;

  SystemMessage.prototype.implement = function(level, message) {
    this.level = level != null ? level : this.read_byte();
    this.message = message != null ? message : this.read_string();
  };

  SystemMessage.prototype.execute = function() {
    switch (this.level) {
      case SystemMessage.INFO:
        return info(this.message);
      case SystemMessage.WARNING:
        return warning(this.message);
      case SystemMessage.ERROR:
        return error(this.message);
    }
  };

  return SystemMessage;

})(ReceivablePacket);

TableOwnershipHandedOver = (function(_super) {

  __extends(TableOwnershipHandedOver, _super);

  function TableOwnershipHandedOver() {
    return TableOwnershipHandedOver.__super__.constructor.apply(this, arguments);
  }

  TableOwnershipHandedOver.prototype.implement = function(seat) {
    this.seat = seat != null ? seat : this.read_byte();
  };

  TableOwnershipHandedOver.prototype.execute = function() {
    if (PLAYERS[this.seat].is(":visible")) {
      return $('#leader').show().appendTo(PLAYERS[this.seat]);
    } else {
      return $('#leader').show().appendTo($('#cue'));
    }
  };

  return TableOwnershipHandedOver;

})(ReceivablePacket);

TableSeatDumped = (function(_super) {

  __extends(TableSeatDumped, _super);

  function TableSeatDumped() {
    return TableSeatDumped.__super__.constructor.apply(this, arguments);
  }

  TableSeatDumped.prototype.implement = function(seat_direction) {
    this.seat_direction = seat_direction != null ? seat_direction : this.read_byte();
  };

  TableSeatDumped.prototype.execute = function() {
    PLAYERS[this.seat_direction].find('.username').text('');
    PLAYERS[this.seat_direction].find('.avatar').text('');
    return PLAYERS[this.seat_direction].removeClass('ready busy');
  };

  return TableSeatDumped;

})(ReceivablePacket);

TableSeatTaken = (function(_super) {

  __extends(TableSeatTaken, _super);

  function TableSeatTaken() {
    return TableSeatTaken.__super__.constructor.apply(this, arguments);
  }

  TableSeatTaken.prototype.implement = function(seat_direction, username, avatar) {
    this.seat_direction = seat_direction != null ? seat_direction : this.read_byte();
    this.username = username != null ? username : this.read_string();
    this.avatar = avatar != null ? avatar : this.read_string();
  };

  TableSeatTaken.prototype.execute = function() {
    PLAYERS[this.seat_direction].find('.username').text(this.username);
    PLAYERS[this.seat_direction].find('.avatar').text(this.avatar);
    return PLAYERS[this.seat_direction].addClass('busy');
  };

  return TableSeatTaken;

})(ReceivablePacket);

TileDiscarded = (function(_super) {

  __extends(TileDiscarded, _super);

  function TileDiscarded() {
    return TileDiscarded.__super__.constructor.apply(this, arguments);
  }

  TileDiscarded.prototype.implement = function(direction, color, num) {
    this.direction = direction != null ? direction : this.read_byte();
    this.color = color != null ? color : this.read_byte();
    this.num = num != null ? num : this.read_byte();
  };

  TileDiscarded.prototype.execute = function() {
    return DISCARDS[parseInt(this.direction)].append($('<span class="tile">').addClass(COLORS[this.color]).text(this.num).attr('unselectable', 'on'));
  };

  return TileDiscarded;

})(ReceivablePacket);

TurnChanged = (function(_super) {

  __extends(TurnChanged, _super);

  function TurnChanged() {
    return TurnChanged.__super__.constructor.apply(this, arguments);
  }

  TurnChanged.prototype.implement = function(seat_direction) {
    this.seat_direction = seat_direction != null ? seat_direction : this.read_byte();
  };

  TurnChanged.prototype.execute = function() {
    if (PLAYERS[this.seat_direction].is(':visible')) {
      return $('#turn').show().appendTo(PLAYERS[this.seat_direction]);
    } else {
      return $('#turn').show().appendTo($('#cue'));
    }
  };

  return TurnChanged;

})(ReceivablePacket);

UpdateMyData = (function(_super) {

  __extends(UpdateMyData, _super);

  function UpdateMyData() {
    return UpdateMyData.__super__.constructor.apply(this, arguments);
  }

  UpdateMyData.prototype.implement = function(avatar, username, points, rank) {
    this.avatar = avatar != null ? avatar : this.read_string();
    this.username = username != null ? username : this.read_string();
    this.points = points != null ? points : this.read_int();
    this.rank = rank != null ? rank : this.read_int();
  };

  UpdateMyData.prototype.execute = function() {
    $('#my_avatar').text(this.avatar);
    $('#my_username').text(this.username);
    $('#my_points').text(this.points);
    return $('#my_rank').text(this.rank);
  };

  return UpdateMyData;

})(ReceivablePacket);

UpdateRoomSetting = (function(_super) {

  __extends(UpdateRoomSetting, _super);

  function UpdateRoomSetting() {
    return UpdateRoomSetting.__super__.constructor.apply(this, arguments);
  }

  UpdateRoomSetting.MATCH_POINTS = 0x00;

  UpdateRoomSetting.BONUS_POINTS = 0x01;

  UpdateRoomSetting.COMPANY_MODE = 0x02;

  UpdateRoomSetting.prototype.implement = function(room_id, match_points, bonus_points, company_mode) {
    this.room_id = room_id != null ? room_id : this.read_byte();
    this.match_points = match_points != null ? match_points : this.read_byte();
    this.bonus_points = bonus_points != null ? bonus_points : this.read_bool();
    this.company_mode = company_mode != null ? company_mode : this.read_byte();
  };

  UpdateRoomSetting.prototype.execute = function() {
    var room, rooms_id;
    rooms_id = this.room_id;
    room = $('#rooms_list li').filter(function() {
      return $(this).data('id') === rooms_id;
    });
    room.find('.match_points').text(this.match_points);
    room.find('.bonus_points').removeClass('on off').addClass(this.bonus_points ? 'on' : 'off');
    return room.find('.company_mode').removeClass('on off').addClass(this.company_mode ? 'on' : 'off');
  };

  return UpdateRoomSetting;

})(ReceivablePacket);

UpdateTableSetting = (function(_super) {

  __extends(UpdateTableSetting, _super);

  function UpdateTableSetting() {
    return UpdateTableSetting.__super__.constructor.apply(this, arguments);
  }

  UpdateTableSetting.prototype.implement = function(match_points, bonus_points, company_mode) {
    this.match_points = match_points != null ? match_points : this.read_byte();
    this.bonus_points = bonus_points != null ? bonus_points : this.read_bool();
    this.company_mode = company_mode != null ? company_mode : this.read_bool();
  };

  UpdateTableSetting.prototype.execute = function() {
    $('#match_points').val(this.match_points);
    $('#bonus_points').val(this.bonus_points);
    return $('#company_mode').val(this.company_mode);
  };

  return UpdateTableSetting;

})(ReceivablePacket);

UpdateTilesLeft = (function(_super) {

  __extends(UpdateTilesLeft, _super);

  function UpdateTilesLeft() {
    return UpdateTilesLeft.__super__.constructor.apply(this, arguments);
  }

  UpdateTilesLeft.prototype.implement = function(tiles_left) {
    this.tiles_left = tiles_left != null ? tiles_left : this.read_byte();
  };

  UpdateTilesLeft.prototype.execute = function() {
    return $('#tiles_left').text(this.tiles_left);
  };

  return UpdateTilesLeft;

})(ReceivablePacket);

UpdateViewport = (function(_super) {

  __extends(UpdateViewport, _super);

  function UpdateViewport() {
    return UpdateViewport.__super__.constructor.apply(this, arguments);
  }

  UpdateViewport.prototype.implement = function(viewport) {
    this.viewport = viewport != null ? viewport : this.read_byte();
  };

  UpdateViewport.prototype.execute = function() {
    this.locate_players(Utils.scroll_array(PLAYERS, this.viewport));
    return this.locate_discards(Utils.scroll_array(DISCARDS, this.viewport));
  };

  UpdateViewport.prototype.locate_players = function(players) {
    var player, _i, _len;
    for (_i = 0, _len = players.length; _i < _len; _i++) {
      player = players[_i];
      player.removeClass('l r t').show();
    }
    players[0].show().hide();
    players[1].show().addClass('r');
    players[2].show().addClass('t');
    return players[3].show().addClass('l');
  };

  UpdateViewport.prototype.locate_discards = function(discards) {
    var discard, _i, _len;
    for (_i = 0, _len = discards.length; _i < _len; _i++) {
      discard = discards[_i];
      discard.removeClass('b l r t');
    }
    discards[0].addClass('b r');
    discards[1].addClass('t r');
    discards[2].addClass('t l');
    return discards[3].addClass('b l');
  };

  return UpdateViewport;

})(ReceivablePacket);

PacketHandler = (function() {

  function PacketHandler() {}

  PacketHandler.PACKETS = [];

  PacketHandler.PACKETS[0x00] = AddTileToCue;

  PacketHandler.PACKETS[0x01] = AppointIndicator;

  PacketHandler.PACKETS[0x02] = ChangeStage;

  PacketHandler.PACKETS[0x03] = ClaimATile;

  PacketHandler.PACKETS[0x04] = DiscardATile;

  PacketHandler.PACKETS[0x05] = DiscardedTileClaimed;

  PacketHandler.PACKETS[0x07] = NewRoomFounded;

  PacketHandler.PACKETS[0x08] = PlayerJoinedLobby;

  PacketHandler.PACKETS[0x09] = PlayerLeftLobby;

  PacketHandler.PACKETS[0x0A] = ReadyUpStatus;

  PacketHandler.PACKETS[0x0B] = ResetTable;

  PacketHandler.PACKETS[0x0C] = RoomBrokeDown;

  PacketHandler.PACKETS[0x0E] = RoomMessageBroadcast;

  PacketHandler.PACKETS[0x0F] = Scoreboard;

  PacketHandler.PACKETS[0x10] = TableOwnershipHandedOver;

  PacketHandler.PACKETS[0x11] = TileDiscarded;

  PacketHandler.PACKETS[0x12] = TurnChanged;

  PacketHandler.PACKETS[0x13] = UpdateMyData;

  PacketHandler.PACKETS[0x15] = UpdateRoomSetting;

  PacketHandler.PACKETS[0x17] = UpdateTilesLeft;

  PacketHandler.PACKETS[0x18] = UpdateViewport;

  PacketHandler.PACKETS[0x1C] = UpdateTableSetting;

  PacketHandler.PACKETS[0x1E] = SystemMessage;

  PacketHandler.PACKETS[0x1F] = ResetLobby;

  PacketHandler.PACKETS[0x20] = TableSeatTaken;

  PacketHandler.PACKETS[0x21] = TableSeatDumped;

  PacketHandler.PACKETS[0x22] = RoomSeatTaken;

  PacketHandler.PACKETS[0x23] = RoomSeatDumped;

  PacketHandler.PACKETS[0x24] = RemoveTileFromCue;

  PacketHandler.PACKETS[0x25] = GameStarted;

  PacketHandler.PACKETS[0x26] = GameSuspended;

  PacketHandler.PACKETS[0x27] = GameIsResuming;

  PacketHandler.PACKETS[0x28] = GameOver;

  PacketHandler.prototype.read = function(byte_array) {
    var code, packet;
    code = byte_array.read_byte();
    if (PacketHandler.PACKETS[code]) {
      packet = new PacketHandler.PACKETS[code]();
      packet.write_bytes(byte_array, byte_array.position, byte_array.bytes_available());
      packet.position = 0;
      packet.implement();
      try {
        packet.execute();
      } catch (e) {
        error(e);
      }
      return dump_packet('incoming', packet.constructor.name, 'download-alt', packet.to_string());
    } else {
      return dump_packet('unknown', 'Bilinmeyen Paket [0x' + ByteArray.dec_to_hex(code) + ']', 'upload-alt', byte_array.to_string());
    }
  };

  return PacketHandler;

})();

Connection = (function() {

  Connection._instace = null;

  Connection.prototype._packet_handler = new PacketHandler();

  Connection.prototype._timer = null;

  Connection.get_instance = function() {
    var _ref;
    return (_ref = this._instance) != null ? _ref : this._instance = new this();
  };

  function Connection() {}

  Connection.prototype.connect = function(host, port) {
    return this._call('connect', host, port);
  };

  Connection.prototype.on_connect = function(evt) {
    info("Bağlantı kuruldu.");
    return clearInterval(this._timer);
  };

  Connection.prototype.on_disconnect = function(evt) {
    var _this = this;
    warning("Bağlantı kapandı.");
    return this._timer = setTimeout(function() {
      return _this.retry()(3000);
    });
  };

  Connection.prototype.on_read_data = function(data) {
    return this._packet_handler.read(new ByteArray(data));
  };

  Connection.prototype.on_io_error = function(evt) {
    return error("G/Ç hatası.");
  };

  Connection.prototype.on_security_error = function(evt) {
    return error("Güvenlik hatası.");
  };

  Connection.prototype.send = function(packet) {
    var errors;
    errors = packet.errors();
    if (errors === null) {
      packet.write();
      packet.calculate();
      this._call('send_packet', packet.to_array());
      return dump_packet('outgoing', packet.constructor.name, 'upload-alt', packet.to_string());
    } else {
      return error(errors);
    }
  };

  Connection.prototype.retry = function() {
    warning("Tekrar bağlanıyor...");
    return this._call('connect');
  };

  Connection.prototype._call = function() {
    var args, func;
    func = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    try {
      return document.getElementById("connection")[func].apply(null, args);
    } catch (e) {
      return error(e);
    }
  };

  return Connection;

})();

$(document).bind("contextmenu", function() {
  return false;
});

btn_snd = new Audio("assets/audio/button.wav");

$('input[type="submit"], input[type="button"]').click(function() {
  return btn_snd.play();
});

error = function(message) {
  return system_message('error', message);
};

info = function(message) {
  return system_message('info', message);
};

warning = function(message) {
  return system_message('warning', message);
};

system_message = function(level, message) {
  return $('#system_messages').append($('<li>').addClass(level).append($('<strong class="message">').text(message)).fadeIn(0).delay(10000).fadeOut(0));
};

change_stage = function(main, alt) {
  var el, stage, _i, _j, _len, _len1, _ref, _ref1, _results;
  _ref = $('#login, #game, #login_form, #register_form, #lobby, #table');
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    stage = _ref[_i];
    $(stage).hide();
  }
  _ref1 = [main, alt];
  _results = [];
  for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
    el = _ref1[_j];
    _results.push($(el).show());
  }
  return _results;
};

dump_packet = function(type, name, icon, data) {
  $('#packets .data').hide();
  return $('#packets').append($('<li>').addClass(type).append($('<i>').addClass('icon-' + icon)).append($('<span class="name">').text(name).click(function() {
    $('#packets .data').hide();
    return $(this).next().toggle();
  })).append($('<div class="data">').append($('<pre>').text(data.hex)).append($('<pre>').text(data.string)))).parent().scrollTop(5000);
};

$('#expand_packets').click(function() {
  return $('#packets .data').toggle();
});

$('#clear_packets').click(function() {
  return $('#packets').empty();
});

$('#packet_simulator').submit(function() {
  try {
    simulate.apply(null, [PacketHandler.PACKETS[$('#server_packets').val()]].concat($("#packet_builder input").map(function() {
      return $(this).val();
    }).get()));
  } catch (e) {
    error(e);
  }
  return false;
});

_ref = PacketHandler.PACKETS;
for (code in _ref) {
  packet = _ref[code];
  $('#server_packets').change(function() {
    var data, _i, _len, _ref1, _results;
    $('#packet_builder').empty();
    _ref1 = $('#server_packets :selected').data('args');
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      data = _ref1[_i];
      _results.push(data.length > 0 ? $('#packet_builder').append($("<li>").append($('<label>').text(data)).append('<input type="text">')) : void 0);
    }
    return _results;
  }).append($('<option>').text(packet.name).val(code).data('args', Utils.get_arg_names(packet.prototype.implement)));
}

simulate = function() {
  var constructor, data;
  constructor = arguments[0], data = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  packet = new constructor;
  packet.implement.apply(packet, data);
  return packet.execute();
};

$("#login_form").submit(function() {
  Connection.get_instance().send(new LoginRequest($("#username").val(), $("#password").val()));
  return false;
});

$('#to_register').click(function() {
  return change_stage($('#login'), $('#register_form'));
});

$("#register_form").submit(function() {
  Connection.get_instance().send(new RegisterRequest($("#_username").val(), $("#_password").val(), $("#password_confirm").val()));
  return false;
});

$('#to_login').click(function() {
  return change_stage($('#login'), $('#login_form'));
});

$('#create_room').click(function() {
  return Connection.get_instance().send(new CreateRoomRequest());
});

$('#my_avatar').click(function() {
  return $('#avatars_box').toggle();
});

$('#match_points').change(function() {
  return Connection.get_instance().send(new ChangeTableSettingRequest(ChangeTableSettingRequest.MATCH_POINTS, $(this).val()));
});

$('#bonus_points').change(function() {
  return Connection.get_instance().send(new ChangeTableSettingRequest(ChangeTableSettingRequest.BONUS_POINTS, $(this).val()));
});

$('#company_mode').change(function() {
  return Connection.get_instance().send(new ChangeTableSettingRequest(ChangeTableSettingRequest.COMPANY_MODE, $(this).val()));
});

$('#ready').click(function() {
  return Connection.get_instance().send(new ReadyUpRequest);
});

$('#score_board').click(function() {
  return Connection.get_instance().send(new ScoreBoardRequest);
});

$('#leave_room').click(function() {
  return Connection.get_instance().send(new LeaveRoomRequest);
});

$('#cue .tile').draggable({
  revert: "invalid",
  appendTo: "#canvas",
  containment: '#canvas',
  zIndex: 99
});

$("#cue .tile_holder").droppable({
  hoverClass: "hover",
  accept: function() {
    return $(this).children().length === 0;
  },
  drop: function(event, ui) {
    if (ui.draggable.attr('id') === 'stack_tile') {
      Connection.get_instance().send(new ClaimTileFromStack(ui.draggable.parent().data('col'), ui.draggable.parent().parent().data('row')));
      return $(this).append($('<span class="tile">').draggable({
        revert: "invalid",
        appendTo: "#canvas",
        containment: '#canvas',
        zIndex: 99
      }));
    } else if (ui.draggable.parent().hasClass('discard')) {
      Connection.get_instance().send(new ClaimTileFromDiscards(ui.draggable.parent().data('col'), ui.draggable.parent().parent().data('row')));
      return $(ui.draggable).appendTo($(this)).css({
        top: 0,
        left: 0
      });
    } else {
      console.log($(this).data('col'));
      console.log($(this));
      Connection.get_instance().send(new MoveTileRequest(ui.draggable.parent().parent().data('row'), ui.draggable.parent().data('col'), $(this).parent().data('row'), $(this).data('col')));
      return $(ui.draggable).appendTo($(this)).css({
        top: 0,
        left: 0
      });
    }
  },
  out: function(event, ui) {}
});

$('#chat_controls').submit(function() {
  Connection.get_instance().send(new BroadcastMessageRequest($('#chat_input').val()));
  $('#chat_input').val('');
  return false;
});

$('#avatars_list li').click(function() {
  return $(this).addClass("selected").siblings().removeClass("selected");
});

$('#change_avatar').click(function() {
  return Connection.get_instance().send(new ChangeAvatarRequest($('#avatars_list li.selected').text()));
});

$('#close_avatars').click(function() {
  return $('#avatars_box').hide();
});
